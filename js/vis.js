// Generated by CoffeeScript 1.10.0
(function() {
  var Network, RadialPlacement, activate, root, window;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  window = typeof exports !== "undefined" && exports !== null ? exports : this;

  if ((typeof _ !== "undefined" && _ !== null) && (typeof s !== "undefined" && s !== null)) {
    log(_);
    _.mixin(s.exports());
    RadialPlacement = function() {
      var center, current, increment, place, placement, radialLocation, radius, setKeys, start, values;
      values = d3.map();
      increment = 20;
      radius = 300;
      center = {
        "x": 0,
        "y": 0
      };
      start = -120;
      current = start;
      radialLocation = function(center, angle, radius) {
        var x, y;
        x = center.x + radius * Math.cos(angle * Math.PI / 180);
        y = center.y + radius * Math.sin(angle * Math.PI / 180);
        return {
          "x": x,
          "y": y
        };
      };
      placement = function(key) {
        var value;
        value = values.get(key);
        if (!values.has(key)) {
          value = place(key);
        }
        return value;
      };
      place = function(key) {
        var value;
        value = radialLocation(center, current, radius);
        values.set(key, value);
        current += increment;
        return value;
      };
      setKeys = function(keys) {
        var firstCircleCount, firstCircleKeys, secondCircleKeys;
        values = d3.map();
        firstCircleCount = 360 / increment;
        if (keys.length < firstCircleCount) {
          increment = 360 / keys.length;
        }
        firstCircleKeys = keys.slice(0, firstCircleCount);
        firstCircleKeys.forEach(function(k) {
          return place(k);
        });
        secondCircleKeys = keys.slice(firstCircleCount);
        radius = radius + radius / 1.8;
        increment = 360 / secondCircleKeys.length;
        return secondCircleKeys.forEach(function(k) {
          return place(k);
        });
      };
      placement.keys = function(_) {
        if (!arguments.length) {
          return d3.keys(values);
        }
        setKeys(_);
        return placement;
      };
      placement.center = function(_) {
        if (!arguments.length) {
          return center;
        }
        center = _;
        return placement;
      };
      placement.radius = function(_) {
        if (!arguments.length) {
          return radius;
        }
        radius = _;
        return placement;
      };
      placement.start = function(_) {
        if (!arguments.length) {
          return start;
        }
        start = _;
        current = start;
        return placement;
      };
      placement.increment = function(_) {
        if (!arguments.length) {
          return increment;
        }
        increment = _;
        return placement;
      };
      return placement;
    };
    Network = function() {
      var allData, charge, curLinksData, curNodesData, filter, filterLinks, filterNodes, force, forceTick, groupCenters, height, hideDetails, layout, link, linkedByIndex, linksG, mapNodes, moveToRadialLayout, neighboring, network, node, nodeColors, nodeCounts, nodesG, radialTick, setFilter, setLayout, setSort, setupData, showDetails, sort, sortedArtists, strokeFor, toggle_active, tooltip, update, updateCenters, updateLinks, updateNodes, width;
      width = 980;
      height = 800;
      allData = [];
      curLinksData = [];
      curNodesData = [];
      linkedByIndex = {};
      nodesG = null;
      linksG = null;
      node = null;
      link = null;
      layout = "force";
      filter = "all";
      sort = "songs";
      groupCenters = null;
      force = d3.layout.force();
      nodeColors = d3.scale.category20();
      tooltip = Tooltip("vis-tooltip", 250);
      charge = function(node) {
        return -Math.pow(node.radius, 2.0) / 1.5;
      };
      network = function(selection, data) {
        var vis;
        allData = setupData(data);
        vis = d3.select(selection).append("svg").attr("width", width).attr("height", height);
        linksG = vis.append("g").attr("id", "links");
        nodesG = vis.append("g").attr("id", "nodes");
        force.size([width, height]);
        setLayout("force");
        setFilter("all");
        return update();
      };
      update = function() {
        var artists;
        curNodesData = filterNodes(allData.nodes);
        curLinksData = filterLinks(allData.links, curNodesData);
        if (layout === "radial") {
          artists = sortedArtists(curNodesData, curLinksData);
          updateCenters(artists);
        }
        force.nodes(curNodesData);
        updateNodes();
        if (layout === "force") {
          force.links(curLinksData);
          updateLinks();
        } else {
          force.links([]);
          if (link) {
            link.data([]).exit().remove();
            link = null;
          }
        }
        return force.start();
      };
      network.toggleLayout = function(newLayout) {
        force.stop();
        setLayout(newLayout);
        return update();
      };
      network.toggleFilter = function(newFilter) {
        force.stop();
        setFilter(newFilter);
        return update();
      };
      network.toggleSort = function(newSort) {
        force.stop();
        setSort(newSort);
        return update();
      };
      network.clearStyle = function() {
        log("clearing");
        return node.each(function(d) {
          var element;
          if (_.hasPath(d, 'searched')) {
            delete d.searched;
          }
          element = d3.select(this);
          return element.style("fill", function(d) {
            return nodeColors(d.artist);
          }).style("opacity", 1.0).style("stroke-width", 1.0);
        });
      };
      network.updateSearch = function(searchTerm) {
        var isSearching, searchRegEx;
        searchRegEx = new RegExp('\w*' + searchTerm.toLowerCase() + '\w*');
        isSearching = false;
        if (!searchTerm || (searchTerm && searchTerm.length <= 0)) {
          return this.clearStyle();
        } else {
          node.each(function(d) {
            var element, match, match_artist;
            element = d3.select(this);
            match = d.name.toLowerCase().search(searchRegEx);
            match_artist = d.artist.toLowerCase().search(searchRegEx);
            if (searchTerm.length > 0 && (match >= 0 || match_artist >= 0)) {
              if (!d.searched) {
                element.attr('r', function(d) {
                  return d.radius + 2;
                });
              }
              isSearching = true;
              element.style("fill", "#EE3333").style("stroke-width", 1.0).style("opacity", 1.0).style("stroke", "#555");
              return d.searched = true;
            } else {
              if (d.searched) {
                element.attr('r', function(d) {
                  return d.radius - 2;
                });
              }
              d.searched = false;
              return element.style("fill", function(d) {
                return nodeColors(d.artist);
              }).style("opacity", .2).style("stroke-width", 1.0);
            }
          });
          if (!isSearching || (searchTerm && searchTerm.length <= 0)) {
            return this.clearStyle();
          }
        }
      };
      network.updateData = function(newData) {
        allData = setupData(newData);
        link.remove();
        node.remove();
        return update();
      };
      setupData = function(data) {
        var circleRadius, countExtent, nodesMap;
        log(data);
        countExtent = d3.extent(data.nodes, function(d) {
          return d.playcount;
        });
        circleRadius = d3.scale.sqrt().range([5, 12]).domain(countExtent);
        data.nodes.forEach(function(n) {
          var randomnumber;
          n.x = randomnumber = Math.floor(Math.random() * width);
          n.y = randomnumber = Math.floor(Math.random() * height);
          return n.radius = circleRadius(n.playcount);
        });
        nodesMap = mapNodes(data.nodes);
        data.links.forEach(function(l) {
          l.source = nodesMap.get(l.source);
          l.target = nodesMap.get(l.target);
          return linkedByIndex[l.source.id + "," + l.target.id] = 1;
        });
        return data;
      };
      mapNodes = function(nodes) {
        var nodesMap;
        nodesMap = d3.map();
        nodes.forEach(function(n) {
          return nodesMap.set(n.id, n);
        });
        return nodesMap;
      };
      nodeCounts = function(nodes, attr) {
        var counts;
        counts = {};
        nodes.forEach(function(d) {
          var name;
          if (counts[name = d[attr]] == null) {
            counts[name] = 0;
          }
          return counts[d[attr]] += 1;
        });
        return counts;
      };
      neighboring = function(a, b) {
        return linkedByIndex[a.id + "," + b.id] || linkedByIndex[b.id + "," + a.id];
      };
      filterNodes = function(allNodes) {
        var cutoff, filteredNodes, playcounts;
        filteredNodes = allNodes;
        if (filter === "popular" || filter === "obscure") {
          playcounts = allNodes.map(function(d) {
            return d.playcount;
          }).sort(d3.ascending);
          cutoff = d3.quantile(playcounts, 0.5);
          filteredNodes = allNodes.filter(function(n) {
            if (filter === "popular") {
              return n.playcount > cutoff;
            } else if (filter === "obscure") {
              return n.playcount <= cutoff;
            }
          });
        }
        return filteredNodes;
      };
      sortedArtists = function(nodes, links) {
        var artists, counts;
        artists = [];
        if (sort === "links") {
          counts = {};
          links.forEach(function(l) {
            var name, name1;
            if (counts[name = l.source.artist] == null) {
              counts[name] = 0;
            }
            counts[l.source.artist] += 1;
            if (counts[name1 = l.target.artist] == null) {
              counts[name1] = 0;
            }
            return counts[l.target.artist] += 1;
          });
          nodes.forEach(function(n) {
            var name;
            return counts[name = n.artist] != null ? counts[name] : counts[name] = 0;
          });
          artists = d3.entries(counts).sort(function(a, b) {
            return b.value - a.value;
          });
          artists = artists.map(function(v) {
            return v.key;
          });
        } else if (sort === "match") {
          artists = nodes.map(function(d) {
            return d.match;
          }).sort(d3.ascending);
          artists = artists.map(function(v) {
            return v.key;
          });
        } else {
          counts = nodeCounts(nodes, "artist");
          artists = d3.entries(counts).sort(function(a, b) {
            return b.value - a.value;
          });
          artists = artists.map(function(v) {
            return v.key;
          });
        }
        return artists;
      };
      updateCenters = function(artists) {
        if (layout === "radial") {
          return groupCenters = RadialPlacement().center({
            "x": width / 2,
            "y": height / 2 - 100
          }).radius(300).increment(18).keys(artists);
        }
      };
      filterLinks = function(allLinks, curNodes) {
        curNodes = mapNodes(curNodes);
        return allLinks.filter(function(l) {
          return curNodes.get(l.source.id) && curNodes.get(l.target.id);
        });
      };
      toggle_active = function(d, i) {
        console.log(nodes);
        if (d.active) {
          return d.tog = false;
        } else {
          return d.tog = true;
        }
      };
      updateNodes = function() {
        node = nodesG.selectAll("circle.node").data(curNodesData, function(d) {
          return d.id;
        });
        node.enter().append("circle").attr("class", "node").attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        }).attr("r", function(d) {
          return d.radius;
        }).style("fill", function(d) {
          return nodeColors(d.artist);
        }).style("stroke", function(d) {
          return strokeFor(d);
        }).style("stroke-width", 1.0);
        node.on("mouseover", showDetails).on("mouseout", hideDetails);
        node.on("click", toggle_active);
        return node.exit().remove();
      };
      updateLinks = function() {
        link = linksG.selectAll("line.link").data(curLinksData, function(d) {
          return d.source.id + "_" + d.target.id;
        });
        link.enter().append("line").attr("class", "link").attr("stroke", "#ddd").attr("stroke-opacity", 0.8).attr("x1", function(d) {
          return d.source.x;
        }).attr("y1", function(d) {
          return d.source.y;
        }).attr("x2", function(d) {
          return d.target.x;
        }).attr("y2", function(d) {
          return d.target.y;
        });
        return link.exit().remove();
      };
      setLayout = function(newLayout) {
        layout = newLayout;
        if (layout === "force") {
          return force.on("tick", forceTick).charge(-200).linkDistance(120);
        } else if (layout === "radial") {
          return force.on("tick", radialTick).charge(charge);
        }
      };
      setFilter = function(newFilter) {
        return filter = newFilter;
      };
      setSort = function(newSort) {
        return sort = newSort;
      };
      forceTick = function(e) {
        node.attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        });
        return link.attr("x1", function(d) {
          return d.source.x;
        }).attr("y1", function(d) {
          return d.source.y;
        }).attr("x2", function(d) {
          return d.target.x;
        }).attr("y2", function(d) {
          return d.target.y;
        });
      };
      radialTick = function(e) {
        node.each(moveToRadialLayout(e.alpha));
        node.attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        });
        if (e.alpha < 0.03) {
          force.stop();
          return updateLinks();
        }
      };
      moveToRadialLayout = function(alpha) {
        var k;
        k = alpha * 0.1;
        return function(d) {
          var centerNode;
          centerNode = groupCenters(d.artist);
          d.x += (centerNode.x - d.x) * k;
          return d.y += (centerNode.y - d.y) * k;
        };
      };
      strokeFor = function(d) {
        return d3.rgb(nodeColors(d.artist)).darker().toString();
      };
      showDetails = function(d, i) {
        var content, ol, ul;
        window.d = d;
        content = '<h3 style="color:' + d3.rgb(nodeColors(d.artist)).darker() + ';">Song Info</h3>';
        content += '<table style="width:100%;"><thead><td style="font-weight:bold;width:60%;"></td><td style="font-weight:bold;float:right;width:40%;"></td></thead><tbody style="width:100%;">';
        content += '<tr style="width:100%;"><td  style="float:left;"><p style="float:left;"><h4>Song</h4> ' + d.name + '</p></td>';
        content += '<td style="text-align:right;"><p style="float:right;"><h4>Match Score</h4> ' + _.numberFormat(d.match, 3) + '</p></td></tr>';
        content += '<tr style="width:100%;">';
        content += '<td><p style="text-align:left;"><h4>Artist </h4> ' + d.artist + '</p></td>';
        content += '<td style="text-align:right;"><p><h4>Play Count</h4> ' + d.playcount + '</p></td>';
        content += '</tr>';
        if (link) {
          link.attr("stroke", function(l) {
            if (l.source === d || l.target === d) {
              return "#555";
            } else {
              return "#ddd";
            }
          }).attr("stroke-opacity", function(l) {
            if (l.source === d || l.target === d) {
              return 1.0;
            } else {
              return 0.3;
            }
          });
        }
        ol = [];
        link.each(function(l) {
          if (l.source === d) {
            return ol.push(l);
          }
        });
        ol = _.sortBy(ol, 'match');
        ul = _.take(ol, 5);
        if (ul && (ul.length - 1) > 0) {
          content += '</table></tbody>';
          content += '<table style="width:100%;"><thead style="margin-bottom:10px;"><td style="font-weight:bold;">Song</td><td style="font-weight:bold;float:right;">Match</td></thead><tbody style="margin-top:10px;width:100%;">';
          content += '<hr style="margin-bottom:10px;" class="tooltip-hr"><h3 style="margin-bottom:10px;color:' + d3.rgb(nodeColors(d.artist)).darker() + ';">Top ' + ul.length + ' Links</h3>';
          ul.forEach(function(l) {
            if (l.source === d && l.target === d) {
              return log('circular');
            } else if (l.source === d) {
              return content += '<tr style="width:100%;"><td>' + _.truncate(l.target.name, 22) + '</td><td style="float:right;"> ' + _.numberFormat(l.target.match, 3) + '</td></tr>';
            } else {
              return content += '<tr style="width:100%;"><td>' + _.truncate(l.source.name, 22) + '</td><td style="float:right;"> ' + _.numberFormat(l.source.match, 3) + '</td></tr>';
            }
          });
          content += '</table></tbody>';
        }
        tooltip.showTooltip(content, d3.event);
        node.style("stroke", function(n) {
          if (n.searched || neighboring(d, n)) {
            return "#555";
          } else {
            return strokeFor(n);
          }
        }).style("stroke-width", function(n) {
          if (n.searched || neighboring(d, n)) {
            return 2.0;
          } else {
            return 1.0;
          }
        }).style('opacity', function(n) {
          if (n.searched || neighboring(d, n) || n === d) {
            return 1;
          } else {
            return .2;
          }
        });
        return d3.select(this).style("stroke", "black").style("stroke-width", 1.0);
      };
      window.showDetails = showDetails;
      hideDetails = function(d, i) {
        console.log(d);
        if (!d.tog) {
          tooltip.hideTooltip();
          node.style("stroke", function(n) {
            if (!n.searched) {
              return strokeFor(n);
            } else {
              return "#555";
            }
          }).style("stroke-width", function(n) {
            if (!n.searched) {
              return 1.0;
            } else {
              return 2.0;
            }
          }).style("opacity", function(n) {
            return 1;
          });
          if (link) {
            return link.attr("stroke", "#ddd").attr("stroke-opacity", 0.8);
          }
        }
      };
      return network;
    };
    activate = function(group, link) {
      d3.selectAll("#" + group + " a").classed("active", false);
      return d3.select("#" + group + " #" + link).classed("active", true);
    };
    $(function() {
      var myNetwork;
      myNetwork = Network();
      window.network = myNetwork;
      d3.selectAll("#layouts a").on("click", function(d) {
        var newLayout;
        newLayout = d3.select(this).attr("id");
        activate("layouts", newLayout);
        return myNetwork.toggleLayout(newLayout);
      });
      d3.selectAll("#filters a").on("click", function(d) {
        var newFilter;
        newFilter = d3.select(this).attr("id");
        activate("filters", newFilter);
        return myNetwork.toggleFilter(newFilter);
      });
      d3.selectAll("#sorts a").on("click", function(d) {
        var newSort;
        newSort = d3.select(this).attr("id");
        activate("sorts", newSort);
        return myNetwork.toggleSort(newSort);
      });
      $("#song_select").on("change", function(e) {
        var songFile;
        songFile = $(this).val();
        return d3.json("data/" + songFile, function(json) {
          window.data = json;
          return myNetwork.updateData(json);
        });
      });
      $("#search").keyup(function() {
        var searchTerm;
        searchTerm = $(this).val();
        return myNetwork.updateSearch(searchTerm);
      });
      return d3.json("data/call_me_al.json", function(json) {
        window.data = json;
        return myNetwork("#vis", json);
      });
    });
  }

}).call(this);
